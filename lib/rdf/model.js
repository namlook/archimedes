// Generated by CoffeeScript 1.7.1
(function() {
  var ModelError, ModelInterface, RdfModel, ValueError, field2uri, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore');

  _.str = require('underscore.string');

  ModelInterface = require('../interface/model');

  field2uri = require('./utils').field2uri;

  ValueError = (function(_super) {
    __extends(ValueError, _super);

    function ValueError() {
      return ValueError.__super__.constructor.apply(this, arguments);
    }

    return ValueError;

  })(Error);

  ModelError = (function(_super) {
    __extends(ModelError, _super);

    function ModelError() {
      return ModelError.__super__.constructor.apply(this, arguments);
    }

    return ModelError;

  })(Error);

  RdfModel = (function(_super) {
    __extends(RdfModel, _super);

    RdfModel.prototype.schema = {
      _id: {
        "protected": true,
        type: 'string',
        compute: function(value, attrs) {
          if (!_.str.startsWith(value, 'http://')) {
            return "" + attrs.model.meta.instancesNamespace + "/" + value;
          } else {
            return value;
          }
        }
      },
      _type: {
        "protected": true,
        type: 'string',
        "default": function(model) {
          return model.meta.uri;
        }
      }
    };

    function RdfModel(properties) {
      var key, propURI, val, value;
      if (!(this.meta.uri || this.meta.propertiesNamespace || this.meta.instancesNamespace)) {
        throw new ModelError("" + this.constructor.name + "'s namespaces are missing");
      }
      for (key in properties) {
        value = properties[key];
        if (value === null || value === (void 0)) {
          continue;
        }
        if (_.str.startsWith(key, 'http://')) {
          propURI = key;
          key = this.db._propertiesIndexURI[key];
          delete properties[propURI];
          properties[key] = value;
        }
        if (value._uri != null) {
          properties[key] = value._uri;
        } else if (_.isArray(value)) {
          properties[key] = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = value.length; _i < _len; _i++) {
              val = value[_i];
              _results.push((val._uri != null) && val._uri || val);
            }
            return _results;
          })();
        }
      }
      RdfModel.__super__.constructor.call(this, properties);
    }

    RdfModel.beforeQuery = function(query, options, callback) {
      return RdfModel.__super__.constructor.beforeQuery.call(this, query, options, (function(_this) {
        return function(err, query, options) {
          var e, key, lang, order, propURI, sortBy, _i, _len, _ref, _sortBy;
          if (err) {
            return callback(err);
          }
          if (!_.isString(query) && !_.isArray(query)) {
            try {
              _this._convertQueryUri(query);
            } catch (_error) {
              e = _error;
              return callback(e);
            }
          }
          if ((options.sortBy != null) && !_.isArray(options.sortBy)) {
            _sortBy = [options.sortBy];
          } else {
            _sortBy = options.sortBy || [];
          }
          sortBy = [];
          for (_i = 0, _len = _sortBy.length; _i < _len; _i++) {
            key = _sortBy[_i];
            if (!_.str.startsWith(key, 'http://')) {
              lang = '';
              order = '';
              if (key[0] === '-') {
                key = key.slice(1);
                order = '-';
              } else {
                key = key.slice(0);
              }
              if (key.indexOf('@') > -1) {
                _ref = key.split('@'), key = _ref[0], lang = _ref[1];
                lang = "@" + lang;
              }
              propURI = field2uri(key, _this);
              sortBy.push("" + order + propURI + lang);
            }
          }
          options.sortBy = sortBy;
          return callback(null, query, options);
        };
      })(this));
    };

    RdfModel.facets = function(field, query, options, callback) {
      var e;
      if (typeof options === 'function' && !callback) {
        callback = options;
        options = {};
      } else if (typeof query === 'function') {
        callback = query;
        query = {};
        options = {};
      }
      if (!field) {
        return callback('field is required');
      }
      if (!callback) {
        return callback('callback is required');
      }
      if (options.limit == null) {
        options.limit = 30;
      }
      if (options.order == null) {
        options.order = 'desc';
      }
      if (!_.str.startsWith(field, 'http://')) {
        try {
          field = field2uri(field, this);
        } catch (_error) {
          e = _error;
          return callback(e);
        }
      }
      try {
        this._convertQueryUri(query);
      } catch (_error) {
        e = _error;
        return callback(e);
      }
      return this.db.facets(field, query, options, callback);
    };

    RdfModel.timeSeries = function(dateField, step, query, options, callback) {
      var e, field, _ref, _ref1;
      if (!dateField) {
        throw 'field is required';
      }
      if (!step) {
        throw 'step is required';
      }
      if (!callback && typeof query === 'function') {
        callback = query;
        query = {};
        options = {};
      } else if (!callback && typeof options === 'function') {
        callback = options;
        options = {};
      }
      if (!callback) {
        throw 'callback is required';
      }
      if (options.limit == null) {
        options.limit = 30;
      }
      if (options.order == null) {
        options.order = 'asc';
      }
      if (!_.str.startsWith(dateField, 'http://')) {
        try {
          field = field2uri(dateField, this);
        } catch (_error) {
          e = _error;
          return callback(e);
        }
      }
      if ((_ref = (_ref1 = this.prototype.schema[dateField]) != null ? _ref1.type : void 0) !== 'datetime' && _ref !== 'date') {
        return callback(("" + this.prototype.meta.name + "." + dateField + " is not a date. timeSeries() ") + "requires a date field");
      }
      try {
        this._convertQueryUri(query);
      } catch (_error) {
        e = _error;
        return callback(e);
      }
      return this.db.timeSeries(field, step, query, options, callback);
    };

    RdfModel.prototype.toSerializableObject = function(options) {
      var jsonObj, key, nspace, propURI, result, val, value, values, _i, _len;
      jsonObj = RdfModel.__super__.toSerializableObject.call(this, options);
      result = {};
      for (key in jsonObj) {
        value = jsonObj[key];
        if (key === '_id' || key === '_type') {
          result[key] = value;
        } else {
          propURI = field2uri(key, this.db[this.meta.name]);
          if (this.db[this.schema[key].type] != null) {
            if (!_.isArray(value)) {
              value = [value];
            }
            values = [];
            for (_i = 0, _len = value.length; _i < _len; _i++) {
              val = value[_i];
              if (!_.str.startsWith(val, 'http://')) {
                nspace = this.db[this.schema[key].type].prototype.meta.instancesNamespace;
                val = "" + nspace + "/" + val;
              }
              values.push(val);
            }
            if (this.schema[key].multi) {
              result[propURI] = {
                _uri: values
              };
            } else {
              result[propURI] = {
                _uri: values[0]
              };
            }
          } else {
            result[propURI] = value;
          }
        }
      }
      return result;
    };

    RdfModel.prototype.serialize = function(options) {
      return this.db.serialize(this.toSerializableObject());
    };

    RdfModel._convertQueryUri = function(query) {
      var key, propURI, val, value, _results;
      _results = [];
      for (key in query) {
        value = query[key];
        if (key === '_id' || key === '_type') {
          continue;
        }
        if (key === '$and') {
          _results.push((function() {
            var _i, _len, _results1;
            _results1 = [];
            for (_i = 0, _len = value.length; _i < _len; _i++) {
              val = value[_i];
              _results1.push(this._convertQueryUri(val));
            }
            return _results1;
          }).call(this));
        } else if (!_.str.startsWith(key, 'http://')) {
          propURI = field2uri(key, this);
          query[propURI] = value;
          _results.push(delete query[key]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return RdfModel;

  })(ModelInterface);

  module.exports = RdfModel;

}).call(this);
