// Generated by CoffeeScript 1.7.1
(function() {
  var Virtuoso, async, graphURI, insertQuery, querystring, request, tripleStore, _;

  _ = require('underscore');

  querystring = require('querystring');

  request = require('request');

  async = require('async');

  module.exports = Virtuoso = (function() {
    function Virtuoso(options) {
      this.endpoint = options.endpoint || 'http://localhost:8890/sparql';
      if (!this.endpoint) {
        throw "endpoint is required";
      }
      this.graphURI = options.graphURI;
    }

    Virtuoso.prototype.sparql = function(query, options, callback) {
      var opts;
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      if (callback == null) {
        throw "callback required";
      }
      opts = {
        uri: this.endpoint,
        headers: {
          'content-type': 'application/x-www-form-urlencoded',
          'accept': 'application/sparql-results+json'
        },
        body: querystring.stringify({
          query: query
        }),
        encoding: 'utf8'
      };
      return request.post(opts, function(err, res, body) {
        var e, regErr, _ref;
        if (err) {
          return callback(err);
        }
        regErr = new RegExp(/^Virtuoso\s\w+\sError\s/);
        if (body.search(regErr) > -1) {
          return callback(body);
        }
        try {
          body = JSON.parse(body);
        } catch (_error) {
          e = _error;
          return callback(e);
        }
        return callback(null, (_ref = body.results) != null ? _ref.bindings : void 0);
      });
    };

    Virtuoso.prototype.query = function(query, options, callback) {
      return this.sparql(query, options, callback);
    };

    Virtuoso.prototype.describe = function(uris, options, callback) {
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      if (callback == null) {
        throw "callback required";
      }
      if (!_.isArray(uris)) {
        uris = [uris];
      }
      return async.map(uris, (function(_this) {
        return function(uri, cb) {
          return _this.describeURI(uri, function(err, pojo) {
            if (err) {
              return cb(err);
            }
            return cb(null, pojo);
          });
        };
      })(this), (function(_this) {
        return function(err, results) {
          var r;
          if (err) {
            return callback(err);
          }
          return callback(null, (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = results.length; _i < _len; _i++) {
              r = results[_i];
              if (r !== null) {
                _results.push(r);
              }
            }
            return _results;
          })());
        };
      })(this));
    };

    Virtuoso.prototype.describeURI = function(uri, options, callback) {
      var sparqlQuery;
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      if (callback == null) {
        throw "callback required";
      }
      sparqlQuery = "construct {\n  <" + uri + "> ?p ?o .\n}  from <" + this.graphURI + "> where {\n  <" + uri + "> ?p ?o .\n}";
      return this.sparql(sparqlQuery, options, function(err, data) {
        var item, key, lang, prop, result, val, value, _i, _len;
        if (err) {
          return callback(err);
        }
        result = {};
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          item = data[_i];
          result._id = item.s.value;
          prop = item.p.value;
          lang = item.o.lang;
          value = item.o.value;
          if (prop === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type') {
            result._type = value;
            continue;
          }
          if (item.o.type === 'uri') {
            value = {
              _uri: value
            };
          }
          if (lang != null) {
            if (result[prop] == null) {
              result[prop] = {};
            }
            if (result[prop][lang] == null) {
              result[prop][lang] = [];
            }
            result[prop][lang].push(value);
          } else {
            if (result[prop] == null) {
              result[prop] = [];
            }
            result[prop].push(value);
          }
        }
        for (key in result) {
          value = result[key];
          if (_.isArray(value) && value.length === 1) {
            result[key] = value[0];
          } else if (_.isObject(value) && !_.isArray(value)) {
            for (lang in value) {
              val = value[lang];
              if (_.isArray(val) && val.length === 1) {
                result[key][lang] = val[0];
              }
            }
          }
        }
        if (_.isEmpty(result)) {
          result = null;
        }
        return callback(null, result);
      });
    };

    Virtuoso.prototype.update = function(sparqlQuery, options, callback) {
      return this.sparql(sparqlQuery, options, function(err, data) {
        if (err) {
          return callback(err);
        }
        return callback(null, true);
      });
    };

    Virtuoso.prototype.count = function(sparqlQuery, callback) {
      return this.sparql(sparqlQuery, (function(_this) {
        return function(err, data) {
          if (err) {
            return callback(err);
          }
          return callback(null, parseInt(data[0].total.value));
        };
      })(this));
    };

    Virtuoso.prototype.length = function(callback) {
      var sparqlQuery;
      if (callback == null) {
        throw "callback required";
      }
      sparqlQuery = "select (count(?s) as ?total)\nfrom <" + this.graphURI + "> where {?s ?p ?o .}";
      return this.sparql(sparqlQuery, (function(_this) {
        return function(err, data) {
          if (err) {
            return callback(err);
          }
          return callback(null, parseInt(data[0].total.value));
        };
      })(this));
    };

    Virtuoso.prototype.clear = function(callback) {
      var sparqlQuery;
      sparqlQuery = "clear graph <" + this.graphURI + ">";
      return this.sparql(sparqlQuery, (function(_this) {
        return function(err, data) {
          if (err) {
            return callback(err);
          }
          return callback(null);
        };
      })(this));
    };

    Virtuoso.prototype.begin = function(callback) {
      if (!callback) {
        throw 'callback is required';
      }
      return process.nextTick(function() {
        return callback(null, false);
      });
    };

    Virtuoso.prototype.commit = function(transactionId, callback) {
      if (!callback) {
        throw 'callback is required';
      }
      return process.nextTick(function() {
        return callback(null, false);
      });
    };

    return Virtuoso;

  })();

  if (require.main === module) {
    graphURI = 'http://example.org';
    tripleStore = new Virtuoso({
      graphURI: graphURI
    });
    insertQuery = "insert data into <" + graphURI + ">{\n    <http://ex.org/book1> <http://ex.org/price> 43 .\n    <http://ex.org/book1> <http://ex.org/title> \"bla\" .\n    <http://ex.org/book2> <http://ex.org/price> 41 .\n    <http://ex.org/book2> <http://ex.org/title> \"ble\" .\n    <http://ex.org/foo1> <http://ex.org/book> <http://ex.org/book1> .\n    <http://ex.org/foo2> <http://ex.org/book> <http://ex.org/book2> .\n}";
    tripleStore.sparql(insertQuery, function(err, data) {
      if (err) {
        throw err;
      }
      return tripleStore.describe(['http://ex.org/book1', 'http://ex.org/book2'], function(err, data) {
        if (err) {
          throw err;
        }
        return tripleStore.clear(function(err, data) {
          if (err) {
            throw err;
          }
          console.log('+++++', data);
          return tripleStore.count(function(err, total) {
            if (err) {
              throw err;
            }
            console.log('....', total);
            return tripleStore.describe(['http://ex.org/book1', 'http://ex.org/book2'], function(err, data) {
              console.log(err, data);
              if (err) {
                throw err;
              }
            });
          });
        });
      });
    });
  }

}).call(this);
