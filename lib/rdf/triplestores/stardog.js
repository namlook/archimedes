// Generated by CoffeeScript 1.7.1
(function() {
  var StardogStore, insertQuery, stardog, tripleStore, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  _.str = require('underscore.string');

  stardog = require('stardog');

  module.exports = StardogStore = (function() {
    function StardogStore(options) {
      this.count = __bind(this.count, this);
      this.clear = __bind(this.clear, this);
      this.describe = __bind(this.describe, this);
      this.update = __bind(this.update, this);
      this.query = __bind(this.query, this);
      this.setDatabase = __bind(this.setDatabase, this);
      this.endpoint = options.endpoint || 'http://localhost:5820';
      if (!this.endpoint) {
        throw "endpoint is required";
      }
      this.credentials = options.credentials || {};
      if (!((this.credentials.login != null) && (this.credentials.password != null))) {
        throw "credentials are required";
      }
      this.databaseName = options.database;
      if (!(this.databaseName && (options.graphURI != null))) {
        this.databaseName = _.str.classify(options.graphURI);
        this.databaseName = _.str.underscored(this.databaseName);
        this.databaseName = _.str.strRight(this.databaseName);
      }
      this._connection = new stardog.Connection();
      this._connection.setEndpoint(this.endpoint);
      this._connection.setCredentials(this.credentials.login, this.credentials.password);
    }

    StardogStore.prototype.setDatabase = function(databaseName) {
      return this.databaseName = databaseName;
    };

    StardogStore.prototype.sparql = function(sparqlQuery, options, callback) {
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      if (callback == null) {
        throw "callback required";
      }
      return this.query(sparqlQuery, options, callback);
    };

    StardogStore.prototype.query = function(sparqlQuery, options, callback) {
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      if (callback == null) {
        throw "callback required";
      }
      options.query = sparqlQuery;
      options.database || (options.database = this.databaseName);
      if (options.txId != null) {
        return this._connection.queryInTransaction(options, function(data) {
          if (options.mimetype === 'text/boolean') {
            return callback(null, data);
          }
          if (_.isString(data)) {
            return callback(data);
          }
          return callback(null, data.results.bindings);
        });
      } else {
        return this._connection.query(options, function(data) {
          if (options.mimetype === 'text/boolean') {
            return callback(null, data);
          }
          if (_.isString(data)) {
            return callback(data);
          }
          return callback(null, data.results.bindings);
        });
      }
    };

    StardogStore.prototype.update = function(sparqlQuery, options, callback) {
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      if (callback == null) {
        throw "callback required";
      }
      options.mimetype = 'text/boolean';
      options.query = sparqlQuery;
      options.database || (options.database = this.databaseName);
      return this._connection.query(options, function(data) {
        if (!_.isBoolean(data)) {
          return callback(data);
        }
        return callback(null, data);
      });
    };

    StardogStore.prototype.describe = function(uris, options, callback) {
      var sparqlQuery, uri, _i, _len;
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      if (callback == null) {
        throw "callback required";
      }
      sparqlQuery = "describe ";
      if (_.isArray(uris)) {
        for (_i = 0, _len = uris.length; _i < _len; _i++) {
          uri = uris[_i];
          sparqlQuery += "<" + uri + "> ";
        }
      } else {
        sparqlQuery += "<" + uris + ">";
      }
      options.query = sparqlQuery;
      options.database || (options.database = this.databaseName);
      return this._connection.queryGraph(options, function(rawdata) {
        var data, item, properties, results, value, _j, _k, _len1, _len2, _ref;
        if (_.isString(rawdata)) {
          return callback(rawdata);
        }
        results = [];
        _ref = rawdata[0].attributes['@graph'];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          data = _ref[_j];
          properties = {};
          for (uri in data) {
            item = data[uri];
            if (uri === '@id') {
              properties._id = item;
            } else {
              properties[uri] = [];
              for (_k = 0, _len2 = item.length; _k < _len2; _k++) {
                value = item[_k];
                properties[uri].push(value['@value']);
              }
              if (_.every(_.map(properties[uri], function(o) {
                return !_.isNaN(parseFloat(o));
              }))) {
                properties[uri] = _.map(properties[uri], function(o) {
                  return parseFloat(o);
                });
              }
              if (_.every(_.map(properties[uri], function(o) {
                return o === 'false' || o === 'true';
              }))) {
                properties[uri] = _.map(properties[uri], function(o) {
                  if (o === 'true') {
                    return true;
                  } else {
                    return false;
                  }
                });
              }
              if (properties[uri].length === 1) {
                properties[uri] = properties[uri][0];
              }
            }
          }
          results.push(properties);
        }
        return callback(null, results);
      });
    };

    StardogStore.prototype.begin = function(callback) {
      if (!callback) {
        throw 'callback is required';
      }
      return this._connection.begin({
        database: this.databaseName
      }, function(transactionId) {
        return callback(null, transactionId);
      });
    };

    StardogStore.prototype.commit = function(transactionId, callback) {
      if (!callback) {
        throw 'callback is required';
      }
      return this._connection.commit({
        database: this.databaseName,
        txId: transactionId
      }, function(data) {
        if (_.isString(data)) {
          return callback(data);
        }
        return callback(null);
      });
    };

    StardogStore.prototype.clear = function(callback) {
      if (!callback) {
        throw 'callback is required';
      }
      return this.begin((function(_this) {
        return function(err, transactionId) {
          var options;
          options = {
            database: _this.databaseName,
            txId: transactionId
          };
          return _this._connection.clearDB(options, function(ok) {
            if (_.isString(ok)) {
              return callback(ok);
            }
            return _this.commit(transactionId, function(err) {
              if (err) {
                return callback(err);
              }
              if (!ok) {
                return callback('something wrong happened while clearing the db');
              }
              return callback(null);
            });
          });
        };
      })(this));
    };

    StardogStore.prototype.count = function(sparqlQuery, callback) {
      return this.query(sparqlQuery, (function(_this) {
        return function(err, data) {
          if (err) {
            return callback(err);
          }
          return callback(null, parseInt(data[0].total.value, 10));
        };
      })(this));
    };

    return StardogStore;

  })();

  if (require.main === module) {
    tripleStore = new StardogStore({
      graphURI: 'http://example.org',
      credentials: {
        login: 'admin',
        password: 'admin'
      }
    });
    insertQuery = "insert data {graph <http://example.org> {\n    <http://ex.org/book1> <http://ex.org/price> 43 .\n    <http://ex.org/book1> <http://ex.org/title> \"bla\" .\n}}";
    tripleStore.update(insertQuery, function(err, data) {
      return tripleStore.update("delete data {graph <http://example.org> {<http://ex.org/book1> <http://ex.org/price> 43 .}};\ninsert data {graph <http://example.org> {<http://ex.org/book1> <http://ex.org/price> 42 .}};", function(err, data) {
        console.log(err, data);
        return tripleStore.query("select * where {?s ?p ?o .}", function(err, res) {
          return console.log(err, data, res);
        });
      });
    });

    /*tripleStore._connection.begin {database: 'http_example_org'}, (txId) ->
        console.log '>>>', txId
        tripleStore._connection.clearDB {database: 'http_example_org', txId: txId}, (ok) ->
            console.log '---', ok
            tripleStore._connection.commit {database: 'http_example_org', txId: txId}, (data) ->
                console.log '===', data
                tripleStore._connection.commit {database: 'http_example_org', txId: txId}, (data) ->
                    console.log 'ooo', data
     */
  }

}).call(this);
