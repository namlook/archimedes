// Generated by CoffeeScript 1.7.1
(function() {
  var check, _;

  check = require('validator');

  _ = require('underscore');

  exports.defaultTypes = {
    'string': {
      validate: _.isString
    },
    'integer': {
      validate: check.isInt,
      compute: function(value, attrs) {
        return parseInt(value, 10);
      }
    },
    'float': {
      validate: check.isFloat,
      compute: function(value, attrs) {
        return parseFloat(value);
      }
    },
    'boolean': {
      compute: function(value, attrs) {
        if (!(_.isBoolean(value) || (value === 0 || value === 1))) {
          throw "" + attrs.model.meta.name + "." + attrs.fieldName + " must be a boolean not '" + (typeof value) + "'";
        }
        return Boolean(value);
      },
      validate: function(value) {
        return _.isBoolean(value) || (value === 0 || value === 1);
      }
    },
    'date': {
      validate: check.isDate,
      compute: function(value) {
        return check.toDate(value);
      }
    },
    'email': {
      type: 'string',
      validate: check.isEmail
    },
    'url': {
      type: 'string',
      validate: check.isURL
    },
    'creditcard': {
      type: 'string',
      validate: check.isCreditCard
    },
    'ip': {
      validate: function(value) {
        return check.isIP(value, 4) || check.isIP(value, 6);
      }
    },
    'ipv4': {
      validate: function(value) {
        return check.isIP(value, 4);
      }
    },
    'ipv6': {
      validate: function(value) {
        return check.isIP(value, 6);
      }
    },
    'hexadecimal': {
      validate: check.isHexadecimal
    },
    'hexcolor': {
      validate: check.isHexColor
    },
    'uuid': {
      validate: function(value) {
        var uuid;
        uuid = check.isUUID;
        return uuid(value, 3) || uuid(value, 4) || uuid(value, 5);
      }
    }
  };

  exports.Type = (function() {
    function Type(db, type) {
      this.db = db;
      this.type = type;
    }

    Type.prototype.compute = function(value, attrs) {
      var fieldName, inheritedType, modelName;
      if (this.type.type) {
        inheritedType = this.db._types[this.type.type];
        if (inheritedType.compute != null) {
          value = inheritedType.compute(value, attrs);
        }
        if (inheritedType.validate != null) {
          if (!inheritedType.validate(value, attrs)) {
            modelName = attrs.model.meta.name;
            fieldName = attrs.fieldName;
            throw "ValidationError: " + modelName + "." + fieldName + " must be a " + this.type.type;
          }
        }
      }
      if (this.type.compute != null) {
        value = this.type.compute(value, attrs);
      }
      return value;
    };

    Type.prototype.validate = function(value, attrs) {
      var ok;
      ok = true;
      if (this.type.type) {
        ok = this.db._types[this.type.type].validate(value, attrs);
      }
      if (ok && (this.type.validate != null)) {
        ok = this.type.validate(value, attrs);
      }
      return ok;
    };

    return Type;

  })();

}).call(this);
